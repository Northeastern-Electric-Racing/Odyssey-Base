/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: serverdata/v1/serverdata.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace serverdata.v1 {
    export class ServerData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: string[];
            unit?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
                if ("unit" in data && data.unit != undefined) {
                    this.unit = data.unit;
                }
            }
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set values(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get unit() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set unit(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            values?: string[];
            unit?: string;
        }): ServerData {
            const message = new ServerData({});
            if (data.values != null) {
                message.values = data.values;
            }
            if (data.unit != null) {
                message.unit = data.unit;
            }
            return message;
        }
        toObject() {
            const data: {
                values?: string[];
                unit?: string;
            } = {};
            if (this.values != null) {
                data.values = this.values;
            }
            if (this.unit != null) {
                data.unit = this.unit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writeRepeatedString(1, this.values);
            if (this.unit.length)
                writer.writeString(2, this.unit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.unit = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerData {
            return ServerData.deserialize(bytes);
        }
    }
}
